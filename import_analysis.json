{
  "file_count": 67,
  "total_imports": 94,
  "external_imports": [
    "argparse",
    "ast",
    "asyncio",
    "bs4",
    "collections",
    "concurrent",
    "csv",
    "dataclasses",
    "datetime",
    "enum",
    "hashlib",
    "importlib",
    "json",
    "logging",
    "math",
    "matplotlib",
    "networkx",
    "numpy",
    "os",
    "pandas",
    "pathlib",
    "plotly",
    "queue",
    "random",
    "re",
    "requests",
    "sentence_transformers",
    "shutil",
    "sklearn",
    "spacy",
    "streamlit",
    "streamlit_autorefresh",
    "string",
    "sys",
    "tempfile",
    "threading",
    "time",
    "torch",
    "traceback",
    "trafilatura",
    "transformers",
    "typing",
    "unicodedata",
    "unittest",
    "urllib",
    "uuid"
  ],
  "internal_imports": [
    "adaptive_migration",
    "adaptive_quarantine_layer",
    "alphawall",
    "autonomous_learner",
    "brain_metrics",
    "bridge_adapter",
    "cli",
    "cluster_namer",
    "config",
    "content_utils",
    "context_engine",
    "data_manager",
    "decision_history",
    "decision_validator",
    "emotion_handler",
    "json_log_utilizer",
    "linguistic_warfare",
    "link_evaluator",
    "link_utils",
    "master_integration_system",
    "master_orchestrator",
    "memory_analytics",
    "memory_architecture",
    "memory_evolution_engine",
    "memory_maintenance",
    "memory_optimizer",
    "orchestrator",
    "parser",
    "processing_nodes",
    "quarantine_layer",
    "reverse_migration",
    "symbol_cluster",
    "symbol_drift_plot",
    "symbol_emotion_cluster",
    "symbol_emotion_updater",
    "symbol_generator",
    "symbol_memory",
    "system_analytics",
    "trail_graph",
    "trail_log",
    "unified_migration_system",
    "unified_weight_system",
    "user_memory",
    "vector_engine",
    "vector_memory",
    "visualization_prep",
    "web_parser",
    "weight_evolution"
  ],
  "missing_modules": [],
  "circular_dependencies": [
    [
      "symbol_memory",
      "linguistic_warfare",
      "symbol_memory"
    ],
    [
      "symbol_memory",
      "visualization_prep",
      "symbol_memory"
    ]
  ],
  "import_errors": [],
  "critical_missing": [
    "pandas",
    "spacy"
  ],
  "dependency_graph": {
    "adaptive_alphawall": [
      "alphawall",
      "emotion_handler"
    ],
    "adaptive_migration": [
      "decision_history"
    ],
    "adaptive_quarantine_layer": [
      "quarantine_layer",
      "quarantine_layer",
      "alphawall"
    ],
    "alphawall": [
      "vector_engine",
      "vector_engine",
      "emotion_handler"
    ],
    "alphawall_bridge_adapter": [
      "parser",
      "symbol_memory",
      "alphawall",
      "vector_engine",
      "link_evaluator"
    ],
    "autonomous_learner": [
      "web_parser",
      "parser",
      "processing_nodes",
      "processing_nodes",
      "processing_nodes",
      "processing_nodes",
      "brain_metrics",
      "memory_architecture",
      "decision_history",
      "memory_optimizer",
      "memory_optimizer"
    ],
    "bridge_adapter": [
      "unified_weight_system",
      "alphawall"
    ],
    "cli": [
      "master_orchestrator",
      "master_orchestrator",
      "master_orchestrator",
      "master_orchestrator",
      "master_orchestrator"
    ],
    "context_engine": [
      "data_manager"
    ],
    "decision_history": [
      "memory_architecture"
    ],
    "decision_validator": [
      "data_manager"
    ],
    "linguistic_warfare": [
      "parser",
      "symbol_memory",
      "emotion_handler",
      "quarantine_layer"
    ],
    "link_evaluator": [
      "alphawall",
      "quarantine_layer",
      "weight_evolution",
      "bridge_adapter",
      "link_utils"
    ],
    "main": [
      "orchestrator",
      "data_manager",
      "config",
      "parser",
      "parser",
      "parser",
      "web_parser",
      "vector_memory",
      "vector_memory",
      "symbol_cluster",
      "trail_log",
      "trail_log",
      "trail_graph",
      "emotion_handler",
      "symbol_emotion_updater",
      "symbol_memory",
      "symbol_memory",
      "symbol_generator",
      "symbol_drift_plot",
      "symbol_emotion_cluster"
    ],
    "master_integration_system": [
      "unified_migration_system",
      "unified_migration_system",
      "json_log_utilizer",
      "unified_weight_system"
    ],
    "master_orchestrator": [
      "unified_weight_system",
      "unified_migration_system",
      "master_integration_system",
      "json_log_utilizer"
    ],
    "memory_analytics": [
      "decision_history"
    ],
    "memory_evolution_engine": [
      "decision_history",
      "adaptive_migration",
      "adaptive_migration",
      "reverse_migration",
      "weight_evolution",
      "memory_analytics"
    ],
    "memory_maintenance": [
      "parser",
      "vector_memory",
      "processing_nodes",
      "processing_nodes",
      "vector_memory",
      "vector_memory",
      "vector_memory"
    ],
    "memory_optimizer": [
      "parser",
      "symbol_memory",
      "parser",
      "web_parser",
      "web_parser",
      "web_parser",
      "vector_memory",
      "vector_memory",
      "symbol_cluster",
      "trail_log",
      "trail_log",
      "trail_graph",
      "emotion_handler",
      "symbol_emotion_updater",
      "symbol_generator",
      "symbol_drift_plot",
      "symbol_emotion_cluster",
      "memory_maintenance",
      "processing_nodes",
      "brain_metrics",
      "memory_evolution_engine",
      "quarantine_layer",
      "linguistic_warfare",
      "linguistic_warfare",
      "visualization_prep",
      "visualization_prep",
      "system_analytics",
      "system_analytics",
      "system_analytics",
      "brain_metrics"
    ],
    "orchestrator": [
      "data_manager",
      "decision_validator",
      "context_engine",
      "config"
    ],
    "parser": [
      "alphawall"
    ],
    "processing_nodes": [
      "parser",
      "emotion_handler",
      "symbol_emotion_updater",
      "symbol_memory",
      "symbol_generator",
      "user_memory",
      "trail_log",
      "unified_weight_system",
      "visualization_prep",
      "quarantine_layer",
      "vector_engine",
      "vector_memory",
      "vector_memory",
      "vector_memory",
      "memory_architecture",
      "decision_history",
      "content_utils",
      "linguistic_warfare",
      "linguistic_warfare"
    ],
    "reverse_migration": [
      "adaptive_migration",
      "adaptive_migration",
      "decision_history"
    ],
    "run_pipeline": [
      "autonomous_learner",
      "memory_evolution_engine",
      "memory_architecture"
    ],
    "run_system": [
      "cli"
    ],
    "symbol_cluster": [
      "cluster_namer"
    ],
    "symbol_memory": [
      "quarantine_layer",
      "linguistic_warfare",
      "visualization_prep"
    ],
    "system_analytics": [
      "user_memory"
    ],
    "talk_to_ai": [
      "alphawall",
      "linguistic_warfare",
      "linguistic_warfare",
      "bridge_adapter",
      "link_evaluator",
      "visualization_prep",
      "processing_nodes",
      "weight_evolution",
      "memory_optimizer",
      "vector_memory",
      "vector_engine",
      "vector_engine",
      "adaptive_quarantine_layer",
      "quarantine_layer"
    ],
    "test_weight_unification": [
      "unified_weight_system",
      "bridge_adapter"
    ],
    "unified_alphawall": [
      "emotion_handler",
      "vector_engine",
      "vector_engine"
    ],
    "unified_migration_system": [
      "unified_weight_system",
      "memory_architecture"
    ],
    "upgrade_old_vectors": [
      "vector_engine",
      "vector_engine"
    ],
    "vector_memory": [
      "vector_engine",
      "vector_engine",
      "quarantine_layer",
      "quarantine_layer",
      "linguistic_warfare",
      "linguistic_warfare",
      "visualization_prep"
    ],
    "visualization_prep": [
      "parser",
      "symbol_memory",
      "link_evaluator",
      "emotion_handler",
      "quarantine_layer",
      "trail_log"
    ],
    "web_parser": [
      "parser"
    ]
  },
  "file_imports": {
    "adaptive_alphawall.py": {
      "from": [
        "pathlib.Path",
        "datetime.datetime",
        "collections.defaultdict",
        "collections.deque",
        "typing.Dict",
        "typing.Tuple",
        "typing.Optional",
        "alphawall.AlphaWall",
        "emotion_handler.predict_emotions"
      ],
      "import": [
        "json",
        "tempfile"
      ],
      "errors": []
    },
    "adaptive_migration.py": {
      "from": [
        "pathlib.Path",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Tuple",
        "typing.Optional",
        "sklearn.metrics.pairwise.cosine_similarity",
        "decision_history.HistoryAwareMemory"
      ],
      "import": [
        "json",
        "numpy",
        "tempfile"
      ],
      "errors": []
    },
    "adaptive_quarantine_layer.py": {
      "from": [
        "pathlib.Path",
        "datetime.datetime",
        "collections.defaultdict",
        "collections.deque",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "quarantine_layer.UserMemoryQuarantine",
        "quarantine_layer.should_quarantine_input",
        "alphawall.AlphaWall"
      ],
      "import": [
        "json",
        "re",
        "tempfile"
      ],
      "errors": []
    },
    "alphawall.py": {
      "from": [
        "pathlib.Path",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "collections.deque",
        "vector_engine.fuse_vectors",
        "vector_engine.encode_with_minilm",
        "emotion_handler.predict_emotions"
      ],
      "import": [
        "hashlib",
        "json",
        "numpy",
        "tempfile"
      ],
      "errors": []
    },
    "alphawall_bridge_adapter.py": {
      "from": [
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Tuple",
        "typing.Optional",
        "datetime.datetime",
        "alphawall.AlphaWall",
        "vector_engine.fuse_vectors",
        "link_evaluator.evaluate_link_with_confidence_gates",
        "collections.Counter"
      ],
      "import": [
        "json",
        "parser",
        "symbol_memory",
        "tempfile"
      ],
      "errors": []
    },
    "analyze_imports.py": {
      "from": [
        "pathlib.Path",
        "collections.defaultdict",
        "collections.deque"
      ],
      "import": [
        "ast",
        "os",
        "sys",
        "json",
        "traceback"
      ],
      "errors": []
    },
    "autonomous_learner.py": {
      "from": [
        "pathlib.Path",
        "collections.defaultdict",
        "collections.Counter",
        "urllib.parse.urljoin",
        "urllib.parse.urlparse",
        "datetime.datetime",
        "processing_nodes.LogicNode",
        "processing_nodes.SymbolicNode",
        "processing_nodes.DynamicBridge",
        "processing_nodes.CurriculumManager",
        "brain_metrics.BrainMetrics",
        "memory_architecture.TripartiteMemory",
        "decision_history.HistoryAwareMemory",
        "memory_optimizer.load_adaptive_config",
        "memory_optimizer.ADAPTIVE_CONFIG_PATH"
      ],
      "import": [
        "time",
        "random",
        "json",
        "re",
        "web_parser",
        "parser",
        "csv",
        "traceback",
        "traceback"
      ],
      "errors": []
    },
    "brain_metrics.py": {
      "from": [
        "pathlib.Path",
        "datetime.datetime",
        "collections.Counter",
        "collections.defaultdict"
      ],
      "import": [
        "json",
        "matplotlib.pyplot",
        "pandas"
      ],
      "errors": []
    },
    "bridge_adapter.py": {
      "from": [
        "pathlib.Path",
        "datetime.datetime",
        "typing.Dict",
        "typing.Tuple",
        "typing.Optional",
        "unified_weight_system.UnifiedWeightSystem",
        "alphawall.AlphaWall"
      ],
      "import": [
        "json",
        "numpy",
        "tempfile"
      ],
      "errors": []
    },
    "cli.py": {
      "from": [
        "pathlib.Path",
        "datetime.datetime",
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "master_orchestrator.MasterOrchestrator",
        "master_orchestrator.SystemMode",
        "master_orchestrator.create_orchestrator",
        "master_orchestrator.quick_start_autonomous",
        "master_orchestrator.quick_start_interactive"
      ],
      "import": [
        "sys",
        "argparse",
        "json",
        "time"
      ],
      "errors": []
    },
    "clustering.py": {
      "from": [
        "sklearn.cluster.KMeans"
      ],
      "import": [
        "numpy"
      ],
      "errors": []
    },
    "cluster_namer.py": {
      "from": [
        "pathlib.Path",
        "collections.Counter",
        "sklearn.metrics.pairwise.cosine_similarity",
        "sklearn.feature_extraction.text.TfidfVectorizer"
      ],
      "import": [
        "json",
        "random"
      ],
      "errors": []
    },
    "config.py": {
      "from": [
        "typing.Dict",
        "typing.Any",
        "typing.Optional",
        "pathlib.Path"
      ],
      "import": [
        "os"
      ],
      "errors": []
    },
    "content_utils.py": {
      "from": [],
      "import": [
        "re"
      ],
      "errors": []
    },
    "context_engine.py": {
      "from": [
        "typing.Dict",
        "typing.List",
        "typing.Tuple",
        "typing.Optional",
        "typing.Set",
        "collections.defaultdict",
        "sentence_transformers.SentenceTransformer",
        "sklearn.metrics.pairwise.cosine_similarity",
        "data_manager.data_manager"
      ],
      "import": [
        "json",
        "os",
        "re",
        "numpy"
      ],
      "errors": []
    },
    "data_manager.py": {
      "from": [
        "typing.Any",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Callable",
        "typing.Set",
        "collections.defaultdict",
        "datetime.datetime",
        "pathlib.Path"
      ],
      "import": [
        "json",
        "os",
        "threading",
        "time",
        "hashlib",
        "shutil",
        "re"
      ],
      "errors": []
    },
    "decision_history.py": {
      "from": [
        "datetime.datetime",
        "memory_architecture.TripartiteMemory",
        "threading.RLock",
        "threading.Lock"
      ],
      "import": [
        "tempfile",
        "os",
        "json",
        "json"
      ],
      "errors": []
    },
    "decision_validator.py": {
      "from": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Any",
        "datetime.datetime",
        "datetime.timedelta",
        "collections.defaultdict",
        "data_manager.data_manager"
      ],
      "import": [
        "json",
        "time",
        "uuid",
        "numpy"
      ],
      "errors": []
    },
    "download_models.py": {
      "from": [
        "transformers.AutoModelForSequenceClassification",
        "transformers.AutoTokenizer"
      ],
      "import": [],
      "errors": []
    },
    "emotion_handler.py": {
      "from": [
        "transformers.AutoTokenizer",
        "transformers.AutoModelForSequenceClassification",
        "transformers.pipeline",
        "collections.defaultdict"
      ],
      "import": [
        "torch",
        "torch.nn.functional"
      ],
      "errors": []
    },
    "graph_visualizer.py": {
      "from": [
        "pathlib.Path"
      ],
      "import": [
        "json",
        "networkx",
        "matplotlib.pyplot"
      ],
      "errors": []
    },
    "inspect_vectors.py": {
      "from": [
        "pathlib.Path"
      ],
      "import": [
        "json"
      ],
      "errors": []
    },
    "json_log_utilizer.py": {
      "from": [
        "pathlib.Path",
        "datetime.datetime",
        "datetime.timezone",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Tuple",
        "collections.defaultdict",
        "collections.Counter"
      ],
      "import": [
        "json",
        "os",
        "logging"
      ],
      "errors": []
    },
    "linguistic_warfare.py": {
      "from": [
        "pathlib.Path",
        "datetime.datetime",
        "datetime.timedelta",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Set",
        "collections.defaultdict",
        "collections.Counter",
        "emotion_handler.predict_emotions",
        "quarantine_layer.UserMemoryQuarantine"
      ],
      "import": [
        "json",
        "re",
        "hashlib",
        "math",
        "parser",
        "symbol_memory"
      ],
      "errors": []
    },
    "link_evaluator.py": {
      "from": [
        "pathlib.Path",
        "datetime.datetime",
        "typing.Dict",
        "typing.Tuple",
        "typing.Optional",
        "typing.List",
        "alphawall.AlphaWall",
        "quarantine_layer.UserMemoryQuarantine",
        "weight_evolution.WeightEvolver",
        "bridge_adapter.AlphaWallBridge",
        "link_utils.evaluate_link_with_confidence_gates"
      ],
      "import": [
        "json",
        "numpy",
        "tempfile"
      ],
      "errors": []
    },
    "link_utils.py": {
      "from": [
        "typing.Tuple"
      ],
      "import": [],
      "errors": []
    },
    "main.py": {
      "from": [
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "datetime.datetime",
        "orchestrator.orchestrator",
        "data_manager.data_manager",
        "config.Config",
        "parser.parse_input",
        "parser.extract_symbolic_units",
        "parser.parse_with_emotion",
        "web_parser.process_web_url",
        "vector_memory.store_vector",
        "vector_memory.retrieve_similar_vectors",
        "symbol_cluster.cluster_vectors_and_plot",
        "trail_log.log_trail",
        "trail_log.add_emotions",
        "trail_graph.show_trail_graph",
        "emotion_handler.predict_emotions",
        "symbol_emotion_updater.update_symbol_emotions",
        "symbol_memory.add_symbol",
        "symbol_memory.prune_duplicates",
        "symbol_generator.generate_symbol_from_context",
        "symbol_drift_plot.show_symbol_drift",
        "symbol_emotion_cluster.show_emotion_clusters"
      ],
      "import": [
        "sys",
        "re",
        "asyncio"
      ],
      "errors": []
    },
    "master_integration_system.py": {
      "from": [
        "pathlib.Path",
        "datetime.datetime",
        "datetime.timezone",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "unified_migration_system.UnifiedMigrationSystem",
        "unified_migration_system.MigrationResult",
        "json_log_utilizer.JSONLogUtilizer",
        "unified_weight_system.UnifiedWeightSystem"
      ],
      "import": [
        "json",
        "time",
        "logging"
      ],
      "errors": []
    },
    "master_orchestrator.py": {
      "from": [
        "pathlib.Path",
        "datetime.datetime",
        "datetime.timezone",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "typing.Callable",
        "dataclasses.dataclass",
        "enum.Enum",
        "unified_weight_system.UnifiedWeightSystem",
        "unified_migration_system.UnifiedMigrationSystem",
        "master_integration_system.MasterIntegrationSystem",
        "json_log_utilizer.JSONLogUtilizer"
      ],
      "import": [
        "sys",
        "os",
        "time",
        "json",
        "traceback",
        "logging",
        "shutil",
        "shutil"
      ],
      "errors": []
    },
    "memory_analytics.py": {
      "from": [
        "datetime.datetime",
        "collections.Counter",
        "pathlib.Path",
        "decision_history.HistoryAwareMemory"
      ],
      "import": [
        "json",
        "tempfile"
      ],
      "errors": []
    },
    "memory_architecture.py": {
      "from": [
        "pathlib.Path",
        "datetime.datetime",
        "threading.Lock",
        "concurrent.futures.ThreadPoolExecutor"
      ],
      "import": [
        "json",
        "shutil",
        "traceback",
        "tempfile",
        "os"
      ],
      "errors": []
    },
    "memory_evolution_engine.py": {
      "from": [
        "pathlib.Path",
        "datetime.datetime",
        "decision_history.HistoryAwareMemory",
        "adaptive_migration.AdaptiveThresholds",
        "adaptive_migration.MigrationEngine",
        "reverse_migration.ReverseMigrationAuditor",
        "weight_evolution.WeightEvolver",
        "memory_analytics.MemoryAnalyzer"
      ],
      "import": [
        "json",
        "tempfile",
        "sys"
      ],
      "errors": []
    },
    "memory_maintenance.py": {
      "from": [
        "pathlib.Path",
        "processing_nodes.detect_content_type",
        "processing_nodes.CurriculumManager",
        "vector_memory.load_vectors",
        "vector_memory.save_vectors",
        "vector_memory.memory_file"
      ],
      "import": [
        "json",
        "parser",
        "vector_memory",
        "spacy"
      ],
      "errors": []
    },
    "memory_optimizer.py": {
      "from": [
        "pathlib.Path",
        "datetime.datetime",
        "parser.load_seed_symbols",
        "web_parser.fetch_raw_html",
        "web_parser.extract_links_with_text_from_html",
        "web_parser.clean_html_to_text",
        "vector_memory.store_vector",
        "vector_memory.retrieve_similar_vectors",
        "symbol_cluster.cluster_vectors_and_plot",
        "trail_log.log_trail",
        "trail_log.add_emotions",
        "trail_graph.show_trail_graph",
        "emotion_handler.predict_emotions",
        "symbol_emotion_updater.update_symbol_emotions",
        "symbol_generator.generate_symbol_from_context",
        "symbol_drift_plot.show_symbol_drift",
        "symbol_emotion_cluster.show_emotion_clusters",
        "memory_maintenance.prune_phase1_symbolic_vectors",
        "processing_nodes.CurriculumManager",
        "brain_metrics.BrainMetrics",
        "memory_evolution_engine.run_memory_evolution",
        "quarantine_layer.UserMemoryQuarantine",
        "linguistic_warfare.LinguisticWarfareDetector",
        "linguistic_warfare.check_for_warfare",
        "visualization_prep.VisualizationPrep",
        "visualization_prep.visualize_processing_result",
        "system_analytics.plot_node_activation_timeline",
        "system_analytics.plot_symbol_popularity_timeline",
        "system_analytics.plot_curriculum_metrics",
        "brain_metrics.display_metrics_summary"
      ],
      "import": [
        "sys",
        "re",
        "argparse",
        "unicodedata",
        "time",
        "json",
        "hashlib",
        "csv",
        "parser",
        "symbol_memory",
        "traceback"
      ],
      "errors": []
    },
    "orchestrator.py": {
      "from": [
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Any",
        "typing.Tuple",
        "data_manager.data_manager",
        "decision_validator.decision_validator",
        "context_engine.context_engine",
        "config.Config"
      ],
      "import": [
        "asyncio",
        "uuid",
        "json",
        "importlib"
      ],
      "errors": []
    },
    "parser.py": {
      "from": [
        "pathlib.Path",
        "alphawall.AlphaWall"
      ],
      "import": [
        "spacy",
        "json",
        "re"
      ],
      "errors": []
    },
    "processing_nodes.py": {
      "from": [
        "pathlib.Path",
        "datetime.datetime",
        "collections.Counter",
        "collections.defaultdict",
        "unified_weight_system.UnifiedWeightSystem",
        "visualization_prep.VisualizationPrep",
        "quarantine_layer.UserMemoryQuarantine",
        "vector_engine.fuse_vectors",
        "vector_memory.store_vector",
        "vector_memory.retrieve_similar_vectors",
        "vector_memory.memory_file",
        "memory_architecture.TripartiteMemory",
        "decision_history.HistoryAwareMemory",
        "content_utils.detect_content_type",
        "linguistic_warfare.LinguisticWarfareDetector",
        "linguistic_warfare.check_for_warfare"
      ],
      "import": [
        "json",
        "hashlib",
        "re",
        "parser",
        "emotion_handler",
        "symbol_emotion_updater",
        "symbol_memory",
        "symbol_generator",
        "user_memory",
        "trail_log",
        "spacy"
      ],
      "errors": []
    },
    "quarantine_layer.py": {
      "from": [
        "pathlib.Path",
        "datetime.datetime",
        "typing.Dict",
        "typing.Optional",
        "typing.List"
      ],
      "import": [
        "json"
      ],
      "errors": []
    },
    "reset_weights.py": {
      "from": [
        "pathlib.Path"
      ],
      "import": [
        "json"
      ],
      "errors": []
    },
    "reverse_migration.py": {
      "from": [
        "datetime.datetime",
        "adaptive_migration.MigrationEngine",
        "adaptive_migration.evaluate_link_with_confidence_gates",
        "decision_history.HistoryAwareMemory"
      ],
      "import": [
        "tempfile"
      ],
      "errors": []
    },
    "run_pipeline.py": {
      "from": [
        "pathlib.Path",
        "datetime.datetime",
        "autonomous_learner.autonomous_learning_cycle",
        "memory_evolution_engine.run_memory_evolution",
        "memory_architecture.TripartiteMemory"
      ],
      "import": [
        "sys",
        "time",
        "argparse",
        "traceback",
        "traceback",
        "traceback"
      ],
      "errors": []
    },
    "run_system.py": {
      "from": [
        "pathlib.Path",
        "cli.main"
      ],
      "import": [
        "sys",
        "os"
      ],
      "errors": []
    },
    "symbol_chainer.py": {
      "from": [
        "sklearn.metrics.pairwise.cosine_similarity",
        "pathlib.Path"
      ],
      "import": [
        "json",
        "numpy"
      ],
      "errors": []
    },
    "symbol_cluster.py": {
      "from": [
        "pathlib.Path",
        "collections.defaultdict",
        "sklearn.cluster.KMeans",
        "sklearn.manifold.TSNE",
        "sklearn.feature_extraction.text.TfidfVectorizer",
        "cluster_namer.pick_cluster_name"
      ],
      "import": [
        "json",
        "matplotlib.pyplot",
        "numpy"
      ],
      "errors": []
    },
    "symbol_drift_plot.py": {
      "from": [
        "pathlib.Path",
        "collections.defaultdict",
        "datetime.datetime"
      ],
      "import": [
        "json",
        "matplotlib.pyplot"
      ],
      "errors": []
    },
    "symbol_emotion_cluster.py": {
      "from": [
        "pathlib.Path",
        "sklearn.manifold.TSNE"
      ],
      "import": [
        "json",
        "matplotlib.pyplot",
        "numpy"
      ],
      "errors": []
    },
    "symbol_emotion_updater.py": {
      "from": [
        "pathlib.Path"
      ],
      "import": [
        "json"
      ],
      "errors": []
    },
    "symbol_generator.py": {
      "from": [
        "pathlib.Path"
      ],
      "import": [
        "json",
        "hashlib",
        "random",
        "string"
      ],
      "errors": []
    },
    "symbol_memory.py": {
      "from": [
        "pathlib.Path",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Any",
        "quarantine_layer.UserMemoryQuarantine",
        "linguistic_warfare.LinguisticWarfareDetector",
        "visualization_prep.VisualizationPrep"
      ],
      "import": [
        "json"
      ],
      "errors": []
    },
    "symbol_suggester.py": {
      "from": [
        "sklearn.cluster.DBSCAN",
        "sklearn.metrics.pairwise.cosine_similarity",
        "uuid.uuid4",
        "pathlib.Path"
      ],
      "import": [
        "json",
        "numpy"
      ],
      "errors": []
    },
    "system_analytics.py": {
      "from": [
        "pathlib.Path",
        "datetime.datetime",
        "collections.Counter",
        "collections.defaultdict"
      ],
      "import": [
        "json",
        "matplotlib.pyplot",
        "matplotlib.dates",
        "pandas",
        "user_memory"
      ],
      "errors": []
    },
    "talk_to_ai.py": {
      "from": [
        "datetime.datetime",
        "pathlib.Path",
        "typing.Dict",
        "typing.List",
        "typing.Tuple",
        "typing.Optional",
        "alphawall.AlphaWall",
        "linguistic_warfare.LinguisticWarfareDetector",
        "linguistic_warfare.check_for_warfare",
        "bridge_adapter.AlphaWallBridge",
        "link_evaluator.EnhancedLinkEvaluator",
        "visualization_prep.VisualizationPrep",
        "processing_nodes.initialize_processing_nodes",
        "weight_evolution.WeightEvolver",
        "memory_optimizer.recompute_adaptive_link_weights",
        "vector_memory.retrieve_similar_vectors",
        "vector_engine.encode_with_minilm",
        "vector_engine.cosine_similarity",
        "adaptive_quarantine_layer.AdaptiveQuarantine",
        "quarantine_layer.UserMemoryQuarantine"
      ],
      "import": [
        "sys",
        "json",
        "time",
        "traceback"
      ],
      "errors": []
    },
    "test_json_files.py": {
      "from": [
        "pathlib.Path"
      ],
      "import": [
        "json",
        "sys"
      ],
      "errors": []
    },
    "test_weight_unification.py": {
      "from": [
        "pathlib.Path",
        "unified_weight_system.UnifiedWeightSystem",
        "bridge_adapter.AlphaWallBridge"
      ],
      "import": [
        "tempfile",
        "sys",
        "traceback"
      ],
      "errors": []
    },
    "trail_graph.py": {
      "from": [
        "pathlib.Path"
      ],
      "import": [
        "json",
        "networkx",
        "matplotlib.pyplot"
      ],
      "errors": []
    },
    "trail_log.py": {
      "from": [
        "pathlib.Path",
        "datetime.datetime"
      ],
      "import": [
        "json",
        "hashlib"
      ],
      "errors": []
    },
    "unified_alphawall.py": {
      "from": [
        "pathlib.Path",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "collections.defaultdict",
        "collections.deque",
        "emotion_handler.predict_emotions",
        "vector_engine.encode_with_minilm",
        "vector_engine.fuse_vectors"
      ],
      "import": [
        "json",
        "hashlib",
        "numpy"
      ],
      "errors": []
    },
    "unified_migration_system.py": {
      "from": [
        "pathlib.Path",
        "datetime.datetime",
        "datetime.timezone",
        "typing.Dict",
        "typing.List",
        "typing.Tuple",
        "typing.Optional",
        "typing.Any",
        "typing.Union",
        "dataclasses.dataclass",
        "dataclasses.asdict",
        "collections.defaultdict",
        "collections.Counter",
        "unified_weight_system.UnifiedWeightSystem",
        "memory_architecture.TripartiteMemory"
      ],
      "import": [
        "json",
        "numpy",
        "logging",
        "tempfile"
      ],
      "errors": []
    },
    "unified_weight_system.py": {
      "from": [
        "pathlib.Path",
        "datetime.datetime",
        "typing.Dict",
        "typing.Tuple",
        "typing.Optional",
        "typing.Any",
        "dataclasses.dataclass"
      ],
      "import": [
        "json",
        "numpy",
        "tempfile"
      ],
      "errors": []
    },
    "upgrade_old_vectors.py": {
      "from": [
        "pathlib.Path",
        "vector_engine.encode_with_minilm",
        "vector_engine.encode_with_e5",
        "sklearn.metrics.pairwise.cosine_similarity"
      ],
      "import": [
        "json",
        "numpy"
      ],
      "errors": []
    },
    "user_memory.py": {
      "from": [
        "pathlib.Path",
        "datetime.datetime"
      ],
      "import": [
        "json"
      ],
      "errors": []
    },
    "vector_engine.py": {
      "from": [
        "sentence_transformers.SentenceTransformer",
        "sklearn.metrics.pairwise.cosine_similarity"
      ],
      "import": [
        "numpy"
      ],
      "errors": []
    },
    "vector_memory.py": {
      "from": [
        "pathlib.Path",
        "datetime.datetime",
        "typing.List",
        "typing.Tuple",
        "typing.Dict",
        "typing.Optional",
        "typing.Any",
        "vector_engine.fuse_vectors",
        "vector_engine.embed_text",
        "sklearn.metrics.pairwise.cosine_similarity",
        "quarantine_layer.UserMemoryQuarantine",
        "quarantine_layer.should_quarantine_input",
        "linguistic_warfare.LinguisticWarfareDetector",
        "linguistic_warfare.check_for_warfare",
        "visualization_prep.VisualizationPrep",
        "datetime.datetime",
        "datetime.timedelta"
      ],
      "import": [
        "json",
        "numpy",
        "hashlib"
      ],
      "errors": []
    },
    "visualization_prep.py": {
      "from": [
        "pathlib.Path",
        "datetime.datetime",
        "typing.Dict",
        "typing.List",
        "typing.Optional",
        "typing.Tuple",
        "typing.Any",
        "link_evaluator.evaluate_link_with_confidence_gates",
        "emotion_handler.predict_emotions",
        "quarantine_layer.UserMemoryQuarantine",
        "trail_log._load_log",
        "unittest.mock.patch"
      ],
      "import": [
        "json",
        "re",
        "hashlib",
        "numpy",
        "parser",
        "symbol_memory",
        "spacy"
      ],
      "errors": []
    },
    "web_parser.py": {
      "from": [
        "bs4.BeautifulSoup",
        "bs4.Comment",
        "pathlib.Path",
        "urllib.parse.urljoin",
        "urllib.parse.urlparse"
      ],
      "import": [
        "requests",
        "trafilatura",
        "time",
        "re",
        "parser"
      ],
      "errors": []
    },
    "weight_evolution.py": {
      "from": [
        "pathlib.Path",
        "datetime.datetime"
      ],
      "import": [
        "json",
        "tempfile"
      ],
      "errors": []
    },
    "data/tripartite_dashboard.py": {
      "from": [
        "plotly.subplots.make_subplots",
        "datetime.datetime",
        "datetime.timedelta",
        "pathlib.Path",
        "collections.defaultdict",
        "collections.Counter",
        "typing.Dict",
        "typing.List",
        "typing.Any",
        "typing.Optional",
        "queue.Queue",
        "streamlit_autorefresh.st_autorefresh"
      ],
      "import": [
        "streamlit",
        "plotly.graph_objects",
        "plotly.express",
        "pandas",
        "json",
        "time",
        "numpy",
        "networkx",
        "threading",
        "os"
      ],
      "errors": []
    }
  }
}